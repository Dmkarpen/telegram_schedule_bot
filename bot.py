import json
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters

SCHEDULE_FILE = 'schedule.json'
USERS_FILE = 'users.json'

default_keyboard = ReplyKeyboardMarkup(
    [["Group", "Menu"]],
    resize_keyboard=True,
    one_time_keyboard=False
)

def load_json(path):
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_json(path, data):
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_schedule_for_day(group, day_name):
    schedule_data = load_json(SCHEDULE_FILE)
    group_schedule = schedule_data.get(group, {})
    day_schedule = group_schedule.get(day_name, [])
    if not day_schedule:
        return f"–ù–∞ {day_name.lower()} –∑–∞–Ω—è—Ç—å –Ω–µ–º–∞—î.\n\n–©–æ–± –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu"
    
    response = f"üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ {day_name} –¥–ª—è –≥—Ä—É–ø–∏ {group}:\n"
    for i, item in enumerate(day_schedule, start=1):
        response += f"{i}. {item['—á–∞—Å']} ‚Äì {item['–ø—Ä–µ–¥–º–µ—Ç']} (–∞—É–¥. {item['–∞—É–¥–∏—Ç–æ—Ä—ñ—è']})\n"
    response += "\n–©–æ–± –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu"
    return response

def get_today_day_name():
    days = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü‚Äô—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]
    return days[datetime.datetime.now().weekday()]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–æ–∑–∫–ª–∞–¥—É –∑–∞–Ω—è—Ç—å.\n–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /group",
        reply_markup=default_keyboard
    )

async def group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–Ü–ü–ó", callback_data="group_–Ü–ü–ó")],
        [InlineKeyboardButton("–§–Ü–ù", callback_data="group_–§–Ü–ù")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—É:", reply_markup=reply_markup)

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_json(USERS_FILE)
    user_id = str(update.effective_user.id)
    group = users.get(user_id)
    if not group:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É: /group")
        return
    today_name = get_today_day_name()
    schedule_text = get_schedule_for_day(group, today_name)
    await update.message.reply_text(schedule_text, reply_markup=default_keyboard)

async def week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_json(USERS_FILE)
    user_id = str(update.effective_user.id)
    group = users.get(user_id)
    if not group:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É: /group")
        return

    days = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü‚Äô—è—Ç–Ω–∏—Ü—è"]
    response = ""
    for day in days:
        
        base_text = get_schedule_for_day(group, day)
        cleaned_text = base_text.replace("\n–©–æ–± –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu", "")
        response += cleaned_text + "\n\n"
    
    await update.message.reply_text(response.strip() + "\n–©–æ–± –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu", reply_markup=default_keyboard)

async def show_day(update: Update, context: ContextTypes.DEFAULT_TYPE, day_name: str):
    users = load_json(USERS_FILE)
    user_id = str(update.effective_user.id)
    group = users.get(user_id)
    if not group:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É: /group")
        return
    schedule_text = get_schedule_for_day(group, day_name)
    await update.message.reply_text(schedule_text, reply_markup=default_keyboard)

async def monday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_day(update, context, "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫")

async def tuesday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_day(update, context, "–í—ñ–≤—Ç–æ—Ä–æ–∫")

async def wednesday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_day(update, context, "–°–µ—Ä–µ–¥–∞")

async def thursday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_day(update, context, "–ß–µ—Ç–≤–µ—Ä")

async def friday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_day(update, context, "–ü‚Äô—è—Ç–Ω–∏—Ü—è")

async def tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = datetime.datetime.now().weekday()
    tomorrow = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü‚Äô—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"][(index + 1) % 7]
    await show_day(update, context, tomorrow)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", callback_data="day_–ü–æ–Ω–µ–¥—ñ–ª–æ–∫")],
        [InlineKeyboardButton("–í—ñ–≤—Ç–æ—Ä–æ–∫", callback_data="day_–í—ñ–≤—Ç–æ—Ä–æ–∫")],
        [InlineKeyboardButton("–°–µ—Ä–µ–¥–∞", callback_data="day_–°–µ—Ä–µ–¥–∞")],
        [InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä", callback_data="day_–ß–µ—Ç–≤–µ—Ä")],
        [InlineKeyboardButton("–ü‚Äô—è—Ç–Ω–∏—Ü—è", callback_data="day_–ü‚Äô—è—Ç–Ω–∏—Ü—è")],
        [InlineKeyboardButton("–°—å–æ–≥–æ–¥–Ω—ñ", callback_data="today"),
         InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="tomorrow")],
        [InlineKeyboardButton("–¢–∏–∂–¥–µ–Ω—å", callback_data="week")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = str(query.from_user.id)
    users = load_json(USERS_FILE)
    group = users.get(user_id)

    if data.startswith("group_"):
        group_name = data.split("_")[1]
        users[user_id] = group_name
        save_json(USERS_FILE, users)
        await query.edit_message_text(f"–ì—Ä—É–ø—É {group_name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –î–ª—è –≤–∏–±–æ—Ä—É –¥–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu")
        # await context.bot.send_message(chat_id=query.message.chat_id, text="", reply_markup=default_keyboard)

    elif data.startswith("day_"):
        if not group:
            await query.edit_message_text("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É: /group")
            return
        day_name = data.split("_")[1]
        text = get_schedule_for_day(group, day_name)
        await query.edit_message_text(text)

    elif data == "today":
        if not group:
            await query.edit_message_text("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É: /group")
            return
        day_name = get_today_day_name()
        text = get_schedule_for_day(group, day_name)
        await query.edit_message_text(text)

    elif data == "tomorrow":
        if not group:
            await query.edit_message_text("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É: /group")
            return
        index = datetime.datetime.now().weekday()
        tomorrow = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü‚Äô—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"][(index + 1) % 7]
        text = get_schedule_for_day(group, tomorrow)
        await query.edit_message_text(text)

    elif data == "week":
        if not group:
            await query.edit_message_text("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É: /group")
            return
        days = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü‚Äô—è—Ç–Ω–∏—Ü—è"]
        response = ""
        for day in days:
            
            base_text = get_schedule_for_day(group, day)
            cleaned_text = base_text.replace("\n\n–©–æ–± –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu", "")
            response += cleaned_text + "\n\n"
    
        await query.edit_message_text(response.strip() + "\n\n–©–æ–± –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu")

async def reply_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()
    if text == "group":
        await group(update, context)
    elif text == "menu":
        await menu(update, context)
    else:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ /menu", reply_markup=default_keyboard)

def main():
    TOKEN = "8147195909:AAFvv5yPzy7KfuWPjV1vjFEIxzqM0UImXPM"

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("group", group))
    app.add_handler(CommandHandler("today", today))
    app.add_handler(CommandHandler("tomorrow", tomorrow))
    app.add_handler(CommandHandler("week", week))
    app.add_handler(CommandHandler("monday", monday))
    app.add_handler(CommandHandler("tuesday", tuesday))
    app.add_handler(CommandHandler("wednesday", wednesday))
    app.add_handler(CommandHandler("thursday", thursday))
    app.add_handler(CommandHandler("friday", friday))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), reply_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == '__main__':
    main()
